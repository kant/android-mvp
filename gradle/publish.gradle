/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

group = GROUP
version = VERSION_NAME

def localMavenPath = "file://" + System.getProperty("user.home") + "/.m2/repository/"
def isCI = Boolean.parseBoolean(System.getenv("IS_CI") ?: "false")
def repositoryUrl = isCI ? "https://api.bintray.com/maven/moovel/android-public/$POM_ARTIFACT_ID/;publish=1" : localMavenPath

def getRepositoryUsername() {
    return project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv("BINTRAY_USER") ?: ""
}

def getRepositoryPassword() {
    return project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv("BINTRAY_PASSWORD") ?: ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: repositoryUrl) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: localMavenPath) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
        task androidJavadocs(type: Javadoc) {
            if (!project.plugins.hasPlugin('kotlin-android')) {
                source = android.sourceSets.main.java.srcDirs
            }

            failOnError true
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

            // Append also the classpath and files for release library variants. This fixes the javadoc warnings.
            // Got it from here - https://github.com/novoda/bintray-release/pull/39/files
            classpath += project.android.libraryVariants.toList().last().javaCompile.classpath
            classpath += project.android.libraryVariants.toList().last().javaCompile.outputs.files

            // We don't need javadoc for internals.
            exclude '**/internal/*'

            // Append Java 7, Android references and docs.
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
            archives androidJavadocsJar
        }
    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocsJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocsJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}